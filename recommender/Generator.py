import json
from itertools import product
import pandas as pd
import numpy as np
import os
import csv
os.environ['CXCALC_PATH'] = '/home/h205c/chemaxon/bin'
from chemdescriptor import ChemAxonDescriptorGenerator


class Generator:
    """
    This generator class helps generate a grid of possible reactions
    """
    def __init__(self,path_triple,path_params):
        """
        Initializes the generator
        Args:
            path_triple:    Path to json file with dictionaries of triples and amounts
            path_params:    Path to json file with a dictionary of parameters
            all_combos:     List of all possible reactions 
        """
        self.path_triple = path_triple
        self.path_params = path_params
        self.all_combos = [] 

    def generate(self):
        """
        Generates all combinitions of triples, their amounts, and parameters
        and store them in the 2-d array called self.all_combos

        """
        # triples_data is an array of dictionary for the triples and amounts:
        triples = open(self.path_triple)
        triples_data = json.load(triples)

        # params_grid_data is a dictionary for the parameters:
        params_grid = open(self.path_params)
        params_grid_data = json.load(params_grid)

        # Get a list of parameters values
        list_params = list(params_grid_data.values())

        # Generate a list of all combos for params 
        params_combos = list(product(*list_params))
      
        # Loop over the array of dictionary for the triples and amounts:
        for i in range(len(triples_data)):
            for j in range(len(params_combos)):
                # Attach one set of triples and amounts to all the combos
                self.all_combos+= [list(triples_data[i].values()) + list(params_combos[j])]


    def generateDescriptor(self,
                           input_molecule_file_path,
                           descriptor_file_path,
                           ph_values,
                           command_stems,
                           ph_command_stems):
        """
        Generates descirptors from a file of smile codes and the desired descriptors,
        and stores the output as a csv file
        Args:
            input_molecule_file_path:   Path to ip molecules
            descriptor_file_path:       Path to ip descriptors
            ph_values:                  List of pH values at which to calculate descriptors
            command_stems:              Dictonary of descriptors and its command stem
            ph_command_stems:           Dict of pH related descriptors and command stems
        """
        cag = ChemAxonDescriptorGenerator(input_molecule_file_path,
                                  descriptor_file_path,
                                  ph_values,
                                  command_stem,
                                  ph_command_stems)

        cag.generate('opnew.csv')


     '''
     Generates expanded grid that contains all possible reactions. Each reaction has 13 paramaters:
     triple + amount + 8 grid parameters + descriptors for the three compounds 

     Args:
         a csv file that is generated by generateDescriptor(). which contains the 
         compound's smile codes and their corresponding descriptors
          
     Returns: A dataframe that stores the expanded grid 
     '''
    def expandedgrid(self,csvfile):
        reader = csv.reader(open(csvfile)) #read csv file generated by DescriptorGenerator
        dic = {}        #keys: compound names (in the forms of SMILE code); values: corresponding descriptors                                    
        for row in reader: 
            dic[row[0]] = row[1:]
        #loops through all_combos and adds the descriptors in each reaction
        for reactionindex in range(len(self.all_combos)):
            for i in range(3):
                #Checks to see the compound names are in the first or second column.
                if isinstance(self.all_combos[reactionindex][1][i], str):
                    compound = self.all_combos[reactionindex][1][i]
                else: compound = self.all_combos[reactionindex][0][i]  
                #Extracts the descriptors of each compound 
                descip = dic[compound]          
                self.all_combos[reactionindex]+= [descip]           
        
        params_grid = open(self.path_params)
        params_grid_data = json.load(params_grid)     
        name_params = list(params_grid_data.keys())
        #set the names for the 13 columns in the expanded grid
        headers = ["triples","amounts"] + name_params + ["C1descriptor", "C2descriptor", "C3descriptor"] 
        newdf = pd.DataFrame(self.all_combos, columns=headers)
                  
        return newdf
            
     
if __name__ == "__main__":

    #Running order: generate(), generateDescriptor(), expandedgrid()
    
    turl = "/home/h205c/recommendation_engine/sample_data/triples_and_amounts.json"
    gurl = "/home/h205c/recommendation_engine/sample_data/grid_params.json"
    test = Generator(turl,gurl)
    array = test.generate()


    smilef = '/home/h205c/chemdescriptor/examples/test_foursmiles.smi'
    desf = '/home/h205c/chemdescriptor/examples/descriptors_list.json'
    ph_values = [7]
    command_stems = None 
    ph_command_stems = None
    test.generateDescriptor(smilef,desf,ph_values,command_stems,ph_command_stems)

    csvfile = "/home/h205c/recommendation_engine/recommender/opnew.csv"
    desc = test.expandedgrid(csvfile)
    print(desc) #print out expanded grid for testing








