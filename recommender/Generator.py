import json
from itertools import product
import pandas as pd
import numpy as np
import os
import csv
os.environ['CXCALC_PATH'] = '/home/h205c/chemaxon/bin'
from chemdescriptor import ChemAxonDescriptorGenerator


class Generator:
    def __init__(self,path_triple,path_params):
        self.path_triple = path_triple
        self.path_params = path_params

    def generate(self):
        # triples_data is an array of dictionary for the triples and amounts:
        triples = open(self.path_triple)
        triples_data = json.load(triples)

        # params_grid_data is a dictionary for the parameters:
        params_grid = open(self.path_params)
        params_grid_data = json.load(params_grid)

        # Get a list of parameters values
        list_params = list(params_grid_data.values())

        # Generate a list of all combos for params 
        params_combos = list(product(*list_params))
      
        all_combos = []
        # Loop over the array of dictionary for the triples and amounts:
        for i in range(len(triples_data)):
            for j in range(len(params_combos)):
                # Attach one set of triples and amounts to all the combos
                all_combos+= [list(triples_data[i].values()) + list(params_combos[j])]     

        return all_combos 


    def generateDescriptor(self,smilefile,desfile):

        cag = ChemAxonDescriptorGenerator(smilefile,
                                  desfile,
                                  ph_values=[7],
                                  command_stems=None,
                                  ph_command_stems=None)

        cag.generate('opnew.csv')


     #combine with the descriptors generated from DescriptorGenerator class
    def expandedgrid(self,csvfile,array):
        reader = csv.reader(open(csvfile)) #read csv file generated by DescriptorGenerator
        dic = {}        #keys: compound names ; values: corresponding descriptors                                    
        for row in reader: 
            dic[row[0]] = row[1:]
        for reactionindex in range(len(array)):
            for i in range(3):
                if isinstance(array[reactionindex][1][i], str):
                    compound = array[reactionindex][1][i]
                else: compound = array[reactionindex][0][i]  
                descip = dic[compound]          
                array[reactionindex]+= [descip]           
        descr_para = dic['Compound']
        params_grid = open("/home/h205c/recommendation_engine/sample_data/grid_params.json")
        params_grid_data = json.load(params_grid)
        
        
        name_params = list(params_grid_data.keys())
        headers = ["triples","amounts"] + name_params
        headers = headers + ["C1descriptor", "C2descriptor", "C3descriptor"]
        newdf = pd.DataFrame(array, columns=headers)
                  
        return newdf
            
     
if __name__ == "__main__":
	
	turl = "/home/h205c/recommendation_engine/sample_data/triples_and_amounts.json"
	gurl = "/home/h205c/recommendation_engine/sample_data/grid_params.json"
	test = Generator(turl,gurl)
	array = test.generate()


	smilef = '/home/h205c/chemdescriptor/examples/test_foursmiles.smi'
	desf = '/home/h205c/chemdescriptor/examples/descriptors_list.json'
	test.generateDescriptor(smilef,desf)

	csvfile = "/home/h205c/recommendation_engine/recommender/opnew.csv"
	desc = test.expandedgrid(csvfile, array)
	print(desc)








